{"version":3,"sources":["webpack:///./template/gallery-item-template.hbs","webpack:///./index.js"],"names":["Handlebars","__webpack_require__","module","exports","template","compiler","main","container","depth0","helpers","partials","data","helper","escapeExpression","largeImageURL","helperMissing","call","nullContext","name","hash","useData","searchForm","document","querySelector","imageContainer","inputValue","mason","Masonry","itemSelector","style","opacity","addEventListener","e","preventDefault","infScrollInstance","pageIndex","innerHTML","loadNextPage","InfiniteScroll","path","value","this","history","responseType","status","on","response","images","markup","map","image","galleryItemTemplate","join","applyMason","setInterval","setTimeout","clearInterval","AddToDom","JSON","parse","hits"],"mappings":"gFAAA,IAAAA,EAAiBC,EAAQ,QAEzBC,EAAAC,SAAAH,EAAA,SAAAA,GAAAI,SAAA,CAAiEC,SAAA,eAAAC,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACjE,IAAAC,EAEA,kDACAL,EAAAM,iBAAA,mBAAAD,EAAA,OAAAA,EAAAH,EAAAK,gBAAA,MAAAN,IAAAM,cAAAN,IAAAI,EAAAH,EAAAM,eAAAH,EAAAI,KAAA,MAAAR,IAAAD,EAAAU,aAAA,GAA6Q,CAAGC,KAAA,gBAAAC,KAAA,GAAgCR,SAAaC,GAC7T,YACCQ,SAAA,uICDKC,aAAaC,SAASC,cAAc,iBACpCC,EAAiBF,SAASC,cAAc,YACxCE,EAAaH,SAASC,cAAc,uBAK1C,SAASG,IACL,IAAIC,QAAQH,EAAgB,CACxBI,aAAc,mBAEhBJ,EAAeK,MAAMC,QAAU,EAyBrCT,EAAWU,iBAAiB,SAN5B,SAAsBC,GAClBA,EAAEC,iBACFC,EAAkBC,UAAY,EAC1BX,EAAeY,UAAU,GACzBF,EAAkBG,iBAM1B,IAAMH,EAAoB,IAAII,IAAgBd,EAAgB,CAC1De,KAAK,WACD,+GAAgHd,EAAWe,MAA3H,0BAA0JC,KAAKN,UAA/J,gBAEJO,SAAS,EACTC,aAAc,OACdC,OAAQ,mBAGZV,EAAkBW,GAAG,OAAQ,SAAAC,IAjCZ,SAAAC,GAEb,IAAMC,EAASD,EAAOE,IAAK,SAAAC,GAAK,OAAIC,IAAoBD,KAAQE,KAAK,IACrE5B,EAAeY,UAAf,IAA8BZ,EAAeY,UAAYY,GAEzD,IAAMK,EAAaC,YAAY5B,EAAM,KACrC6B,WAAW,WACRC,cAAcH,IACf,KA2BFI,CADeC,KAAKC,MAAMb,GAAUc","file":"main.b941690bc775844bf06e.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"compiler\":[7,\">= 4.0.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    var helper;\n\n  return \"<li class=\\\"gallery__item\\\">\\n    <img src=\"\n    + container.escapeExpression(((helper = (helper = helpers.largeImageURL || (depth0 != null ? depth0.largeImageURL : depth0)) != null ? helper : helpers.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"largeImageURL\",\"hash\":{},\"data\":data}) : helper)))\n    + \">\\n</li>\";\n},\"useData\":true});","import InfiniteScroll from 'infinite-scroll';\r\nimport galleryItemTemplate from './template/gallery-item-template.hbs';\r\n\r\n\r\nimport './styles.css';\r\n\r\n// REFS\r\nconst searchForm = document.querySelector('.search-form');\r\nconst imageContainer = document.querySelector('.gallery');\r\nconst inputValue = document.querySelector('.search-form__input');\r\n\r\n//добавляем сначала маркап а потом применяем на него мэйсонри\r\n\r\n\r\nfunction mason(){\r\n  \r\n    new Masonry(imageContainer, {\r\n        itemSelector: '.gallery__item',\r\n      });\r\n      imageContainer.style.opacity = 1\r\n   };\r\n\r\n\r\n\r\nconst AddToDom = images => {\r\n\r\n    const markup = images.map( image => galleryItemTemplate(image)).join('');\r\n    imageContainer.innerHTML = `${imageContainer.innerHTML + markup}`\r\n\r\n    const applyMason = setInterval(mason,100);\r\n    setTimeout(() => {\r\n       clearInterval(applyMason)\r\n   }, 1000);\r\n }\r\n\r\n\r\n// Вешаю сдушатель на сабмит\r\n\r\nfunction handleSubmit(e) {\r\n    e.preventDefault();\r\n    infScrollInstance.pageIndex = 1;\r\n        imageContainer.innerHTML='';\r\n        infScrollInstance.loadNextPage();\r\n};\r\nsearchForm.addEventListener('submit', handleSubmit);\r\n\r\n// Initialize infinite-scroll\r\n\r\nconst infScrollInstance = new InfiniteScroll( imageContainer, {  \r\n    path:function() {\r\n        return `https://cors-anywhere.herokuapp.com/https://pixabay.com/api/?key=13083162-0136df30d1856527dad6bba93&q=${inputValue.value}&image_type=photo&page=${this.pageIndex}&per_page=20`;\r\n    },\r\n    history: false,\r\n    responseType: 'text',\r\n    status: '.loader-ellips'\r\n});\r\n\r\ninfScrollInstance.on('load', response => {\r\n    const images = JSON.parse(response).hits;\r\n    AddToDom(images)\r\n\r\n});\r\n\r\n"],"sourceRoot":""}